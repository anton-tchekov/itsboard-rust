	fn decode_start(&mut self, next_bit: BitData) -> Section {
		if next_bit.high {
			return Section::from_bit(bit, SectionContent::Empty);
		}

		self.state = DecoderUartState::Data;
		return Section::from_bit(bit, SectionContent::StartBit);
	}

	fn decode_data(&mut self, next_bit: BitData, iteration: u32) -> Section {
		if iteration < self.databits as u32 {
			self.state = DecoderUartState::Data(iteration + 1);
			return Section::from_bit(bit, SectionContent::Bit(next_bit.high));
		}

		self.state = DecoderUartState::Parity;
		return Section { start: (), end: (), content: () }
	}

		fn decode_next(&mut self, next_bit: BitData, output: &mut SectionBuffer) -> Result<(), ()> {
		match self.state {
			DecoderUartState::Start(state_data) => Ok(()),
			DecoderUartState::Data(state_data) => Ok(()),
			DecoderUartState::Parity => Ok(()),
			DecoderUartState::Stop => Ok(())
		}
	}

	fn decode_start(&mut self, bit: Option<BitData>, state_data: Option<Section>, output: &mut SectionBuffer) -> Result<(), ()> {
		let next_bit = match (bit, state_data) {
			(None, None) => return Ok(()),
			(None, Some(section)) => return output.push(section),
			(Some(bit), _) => bit,
		};

		if !next_bit.high {
			self.state = DecoderUartState::Data(None);

			return output.push(Section::from_bit(next_bit, SectionContent::StartBit))
		}

		match state_data {
			None => {
				self.state = DecoderUartState::Start(Some(Section {
					start: next_bit.start_time,
					end: next_bit.end_time,
					content: SectionContent::Empty,
				}));
				Ok(())
			}

			Some(mut section) => {
				section.end = next_bit.end_time;
				Ok(())
			}
		}
	}

	fn decode_data(&mut self, bit: Option<BitData>, state_data: Option<UartDataState>, output: &mut SectionBuffer) -> Result<(), ()> {
		let next_bit = match (bit, state_data) {
			(None, None) => return Ok(()),
			(None, Some(data)) => return output.push(data.to_section()),
			(Some(bit), _) => bit,
		};

		let mut state_data = match state_data {
			None => {
				self.state = DecoderUartState::Data(Some(UartDataState::from_bit(next_bit)));
				return Ok(());
			}
			Some(data) => data
		};

		state_data.iteration += 1;
		state_data.word = (state_data.word << 1) | next_bit.high as u32;
		state_data.end = next_bit.end_time;

		self.state = DecoderUartState::Data(Some(state_data));
		
		if state_data.iteration == self.databits as usize {
			self.state = DecoderUartState::Parity;
			return output.push(state_data.to_section())
		}

		Ok(())
	}

	fn decode_parity(&mut self, bit: Option<BitData>, state_data: u32, output: &mut SectionBuffer) -> Result<(), ()> {
		let bit = match bit {
			None => { return Ok(()) },
			Some(bit) => bit			
		};

		let ones = ((state_data << 1) | bit.high as u32).count_ones();
		let is_even = ones % 2 == 0;

		let section = match (self.parity, is_even) {
			(Parity::Even, false) => {Section::from_bit(bit, SectionContent::Err("expected even parity, but was odd"))},
			(Parity::Odd, true) => {Section::from_bit(bit, SectionContent::Err("expected odd parity, but was even"))},
			_ => Section::from_bit(bit, SectionContent::ParityBit(bit.high))
		};

		self.state = DecoderUartState::Stop;
		output.push(section)
	}

	fn decode_stop(&mut self, bit: Option<BitData>, iterations: usize, output: &mut SectionBuffer) -> Result<(), ()> {
		let bit = match bit {
			None => { return Ok(()) },
			Some(bit) => bit			
		};

		let section = match bit.high {
			true => Section::from_bit(bit, SectionContent::StopBit),
			false => Section::from_bit(bit, SectionContent::Err("Expected high for Stopbit, but was low"))
		};

		output.push(section);

		iterations += 1;
		self.state = match iterations == self.stopbits as usize {
			true => {DecoderUartState::Start(None)}
			false => {DecoderUartState::Stop}
		};
		Ok(())
	}

	use core::mem::discriminant;

use crate::decoder::*;
use crate::sample::*;

#[derive(Copy, Clone)]
pub enum Parity {
    None,
    Even,
    Odd,
}

#[repr(u32)]
#[derive(Clone, Copy)]
pub enum DataBits {
    Five = 5,
    Six,
    Seven,
    Eight,
    Nine,
}

#[repr(u32)]
#[derive(Clone, Copy)]
pub enum StopBits {
    One = 1,
    OneAndHalf,
    Two,
}

#[derive(Copy, Clone)]
enum DecoderUartState {
    Idle,
    Start,
    Data,
    Parity,
    Stop,
}

impl PartialEq for DecoderUartState {
    fn eq(&self, other: &Self) -> bool {
        discriminant(self) == discriminant(other)
    }
}

pub struct DecoderUartData {
    section: Option<Section>,
    bit: BitData,
    state: DecoderUartState,
    iteration: usize,
    word: u32,
}

impl DecoderUartData {
    pub fn new() -> Self {
        Self {
            section: None,
            bit: BitData::new(),
            state: DecoderUartState::Idle,
            iteration: 0,
            word: 0,
        }
    }

    pub fn init_section(&mut self, content: SectionContent) {
        self.section = Some(Section::from_bit(&self.bit, content));
    }

    pub fn update_word(&mut self) {
        self.word = (self.word << 1) | self.bit.high as u32;
    }

    pub fn handle(&mut self, decoder: &DecoderUart, output: &mut SectionBuffer) {
        loop {
            let previous_state = self.state;
            let processed = self.process(decoder);

            if previous_state != self.state {
                if let Some(section) = self.section {
                    output.push(section);
                    self.section = None;
                }
            }

            if processed {
                break;
            }
        }
    }

    fn process(&mut self, decoder: &DecoderUart) -> bool {
        match self.state {
            DecoderUartState::Idle => self.process_idle(),
            DecoderUartState::Start => self.process_start(),
            DecoderUartState::Data => self.process_data(decoder),
            DecoderUartState::Parity => self.process_parity(decoder),
            DecoderUartState::Stop => self.process_stop(decoder),
        }
    }

    fn process_idle(&mut self) -> bool {
        if !self.bit.high {
            self.state = DecoderUartState::Data;
            return false;
        }

        match self.section.as_mut() {
            Some(section) => section.end = self.bit.end_time,
            None => self.init_section(SectionContent::Empty),
        }

        true
    }

    fn process_start(&mut self) -> bool {
        self.init_section(SectionContent::StartBit);
        self.state = DecoderUartState::Parity;
        self.word = 0;
        self.iteration = 0;
        true
    }

    fn process_data(&mut self, decoder: &DecoderUart) -> bool {
        self.iteration += 1;
        self.update_word();

        match self.section.as_mut() {
            Some(section) => {
                section.end = self.bit.end_time;
                section.content = SectionContent::Word(self.word);
            }
            None => self.init_section(SectionContent::Word(self.word)),
        }

        if self.iteration == decoder.databits as usize {
            self.state = DecoderUartState::Parity;
        }

        true
    }

    fn process_parity(&mut self, decoder: &DecoderUart) -> bool {
        self.update_word();

        let ones = self.word.count_ones();
        let is_even = ones % 2 == 0;

        let content = match (decoder.parity, is_even) {
            (Parity::Even, false) => SectionContent::Err("expected even parity, but was odd"),
            (Parity::Odd, true) => SectionContent::Err("expected odd parity, but was even"),
            _ => SectionContent::ParityBit(self.bit.high),
        };

        self.init_section(content);
        self.state = DecoderUartState::Stop;
        self.iteration = 0;
        true
    }

    fn process_stop(&mut self, decoder: &DecoderUart) -> bool {
        let content = if self.bit.high {
            SectionContent::StopBit
        } else {
            SectionContent::Err("expected high for stop bit, but was low")
        };

        match self.section.as_mut() {
            Some(section) => {
                section.end = self.bit.end_time;
                section.content = content;
            }
            None => self.init_section(content),
        }

        self.iteration += 1;
        if self.iteration == decoder.stopbits as usize {
            self.state = DecoderUartState::Start;
        }

        true
    }
}

pub struct DecoderUart {
    pub rx_pin: DecoderPin,
    pub tx_pin: DecoderPin,
    pub databits: DataBits,
    pub parity: Parity,
    pub stopbits: StopBits,
    pub baudrate: u32,
}

impl DecoderUart {
    fn bitwise_iterator<'a>(&self, samples: &'a SampleBuffer) -> BitwiseIterator<'a> {
        let bit_time = TIMER_CLOCK_RATE as f32 / self.baudrate as f32;
        BitwiseIterator::new(samples.iter(self.rx_pin), bit_time)
    }
}

impl Decoder for DecoderUart {
    fn decode(&self, samples: &SampleBuffer, output: &mut SectionBuffer) -> Result<(), ()> {
        let mut bits = self.bitwise_iterator(samples);
        let mut data = DecoderUartData::new();

        while let Some(bit) = bits.next() {
            data.bit = bit;
            data.handle(self, output);
        }

        // TODO: finish the last section if necessary
        Ok(())
    }

    fn num_pins(&self) -> usize {
        2
    }

    fn get_pin(&self, idx: usize) -> Option<DecoderPin> {
        match idx {
            0 => Some(self.rx_pin),
            1 => Some(self.tx_pin),
            _ => None,
        }
    }

    fn get_pin_name(&self, idx: usize) -> Option<&'static str> {
        match idx {
            0 => Some("RX"),
            1 => Some("TX"),
            _ => None,
        }
    }
}